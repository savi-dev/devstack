# Neutron Ryu plugin
# ------------------

# Save trace setting
MY_XTRACE=$(set +o | grep xtrace)
set +o xtrace

source $TOP_DIR/lib/neutron_plugins/ovs_base
source $TOP_DIR/lib/neutron_thirdparty/janus      # for configuration value

function neutron_plugin_create_nova_conf() {
    _neutron_ovs_base_configure_nova_vif_driver
    iniset $NOVA_CONF DEFAULT libvirt_ovs_integration_bridge "$OVS_BRIDGE"
    iniset $NOVA_CONF DEFAULT libvirt_ovs_janus_api_host "$JANUS_API_HOST:$JANUS_API_PORT"
    iniset $NOVA_CONF DEFAULT janus_host "$JANUS_API_HOST"
    iniset $NOVA_CONF DEFAULT janus_port "$JANUS_API_PORT"
}

function neutron_plugin_install_agent_packages() {
    _neutron_ovs_base_install_agent_packages

    # neutron_ryu_agent requires ryu module
    # install_package $(get_packages "ryu")
    install_janus
    init_janus
    # configure_janus
}

function neutron_plugin_configure_common() {
    Q_PLUGIN_CONF_PATH=etc/neutron/plugins/janus
    Q_PLUGIN_CONF_FILENAME=janus.ini
    Q_DB_NAME="ovs_neutron"
    Q_PLUGIN_CLASS="neutron.plugins.janus.janus_neutron_plugin.JanusNeutronPluginV2"
    iniset /$Q_PLUGIN_CONF_PATH/$Q_PLUGIN_CONF_FILENAME ovs openflow_rest_api $JANUS_API_HOST:$JANUS_API_PORT
    iniset /$Q_PLUGIN_CONF_PATH/$Q_PLUGIN_CONF_FILENAME ovs openflow_controller $RYU_OFP_HOST:$RYU_OFP_PORT
}

function neutron_plugin_configure_debug_command() {
    _neutron_ovs_base_configure_debug_command
    iniset $NEUTRON_TEST_CONFIG_FILE DEFAULT janus_api_host $JANUS_API_HOST:$JANUS_API_PORT
}

function neutron_plugin_configure_dhcp_agent() {
    iniset $Q_DHCP_CONF_FILE DEFAULT janus_api_host $JANUS_API_HOST:$JANUS_API_PORT
}

function neutron_plugin_configure_l3_agent() {
    iniset $Q_L3_CONF_FILE DEFAULT janus_api_host $JANUS_API_HOST:$JANUS_API_PORT
    _neutron_ovs_base_configure_l3_agent
}

function neutron_plugin_configure_plugin_agent() {
    # Set up integration bridge
    _neutron_ovs_base_setup_bridge $OVS_BRIDGE
    if [ -n "$DATAPATH_ID" ]; then
       neutron_ovs_base_set_datapath_id $OVS_BRIDGE $DATAPATH_ID
    fi
    if [ -n "$JANUS_INTERNAL_INTERFACE" ]; then
        sudo ovs-vsctl --no-wait -- --may-exist add-port $OVS_BRIDGE $JANUS_INTERNAL_INTERFACE
    fi
    iniset /$Q_PLUGIN_CONF_FILE ovs integration_bridge $OVS_BRIDGE
    AGENT_BINARY="$NEUTRON_DIR/neutron/plugins/janus/agent/janus_neutron_agent.py"

    _neutron_ovs_base_configure_firewall_driver
}

function neutron_plugin_configure_service() {
    iniset /$Q_PLUGIN_CONF_FILE ovs openflow_rest_api $JANUS_API_HOST:$JANUS_API_PORT
    iniset /$Q_PLUGIN_CONF_FILE ovs openflow_controller $RYU_OFP_HOST:$RYU_OFP_PORT

    _neutron_ovs_base_configure_firewall_driver
}

function neutron_plugin_setup_interface_driver() {
    local conf_file=$1
    iniset $conf_file DEFAULT interface_driver neutron.agent.linux.interface.JanusOVSInterfaceDriver
    iniset $conf_file DEFAULT ovs_use_veth False
}

function has_neutron_plugin_security_group() {
    # 0 means True here
    return 0
}

function neutron_plugin_check_adv_test_requirements() {
    is_service_enabled q-agt && is_service_enabled q-dhcp && return 0
}

# Restore xtrace
$MY_XTRACE
