# lib/whale
# Functions to control the configuration and operation of the whale service
# <do not include this template file in ``stack.sh``!>

# Dependencies:
# ``functions`` file
# ``SERVICE_{TENANT_NAME|PASSWORD}`` must be defined
# <list other global vars that are assumed to be defined>

# ``stack.sh`` calls the entry points in this order:
#
# install_whale
# configure_whale
# init_whale
# start_whale
# stop_whale
# cleanup_whale

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace


# Defaults
# --------

# <define global variables here that belong to this project>

# Set up default directories
WHALE_DIR=$DEST/whale
WHALECLIENT_DIR=$DEST/python-whaleclient
WHALE_CONF_DIR=${WHALE_CONF_DIR:-$WHALE_DIR/etc}
WHALE_CONF=$WHALE_CONF_DIR/whale-api.conf
WHALE_CONF_SOURCE=${WHALE_CONF_SOURCE:-$TOP_DIR/samples/whale/whale-vbox-graph.xml}
WHALE_CONF_NODE=$WHALE_CONF_DIR/node.xml
GRAPH_DB_DIR=$DEST/neo4j-graphdb
GRAPH_DB_FILE=neo4j-community-1.9.M05-unix.tar.gz
GRAPH_DB_INSTALLED_DIR=neo4j-community-1.9.M05

# Support entry points installation of console scripts
if [[ -d $WHALE_DIR/bin ]]; then
    WHALE_BIN_DIR=$WHALE_DIR/bin
else
    WHALE_BIN_DIR=/usr/local/bin
fi

# Glance connection info.  Note the port must be specified.
WHALE_HOSTPORT=${WHALE_HOSTPORT:-$SERVICE_HOST:9976}


# Entry Points
# ------------

# cleanup_whale() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_whale() {
    # kill instances (nova)
    # delete image files (glance)
    # This function intentionally left blank
    :
}

# configure_whale() - Set config files, create data dirs, etc
function configure_whale() {
    setup_develop $WHALE_DIR
}

# configure_whale() - Set config files, create data dirs, etc
function configure_whaleclient() {
    setup_develop $WHALECLIENT_DIR
}

# init_whale() - Initialize databases, etc.
function init_whale() {
    add_nova_opt "janus_host=$JANUS_API_HOST"
    add_nova_opt "janus_port=$JANUS_API_PORT"
}

function install_graphdb() {
    if [[ ! -d ${GRAPH_DB_DIR} ]]; then
        if [[ ! -f ${GRAPH_DB_FILE} ]]; then
            printf "===========================================================\n"
            printf "Neo4j Graph Database is not installed in ${GRAPH_DB_DIR}\n"
            printf "Please, download Neo4j Graph Database Community version for Linux/Mac from http://www.neo4j.com/download\n"
            printf "The current version is ${GRAPH_DB_FILE} and put the file in the ${TOP_DIR}\n"
            printf "===========================================================\n"
            exit 1
        else
            printf "${GRAPH_DB_FILE} exists\n"
            tar xvzf ${GRAPH_DB_FILE}
            mv ${TOP_DIR}/${GRAPH_DB_INSTALLED_DIR} ${GRAPH_DB_DIR}
            echo_summary "Installing Graph Database"
        fi
    else
        echo_summary "Neo4j Graph Database has been already installed in ${GRAPH_DB}\n"
    fi 
}

# install_whale() - Collect source and prepare
function install_whale() {
    git_clone $WHALE_REPO $WHALE_DIR $WHALE_BRANCH
}

# install_whale() - Collect source and prepare
function install_whaleclient() {
    git_clone $WHALE_CLIENT_REPO $WHALECLIENT_DIR $WHALECLIENT_BRANCH
    # copy predefined graph to the configuration folder
    cp -f $WHALE_CONF_SOURCE $WHALE_CONF_NODE
}

# start_graphdb() - Start running processes, including screen
function start_graphdb() {
    echo_summary "Starting graph db"
    # copy properties to neo4j
    cp -f $WHALE_DIR/etc/*.properties $GRAPH_DB_DIR/conf
    screen_it neo4j "cd $GRAPH_DB_DIR && $GRAPH_DB_DIR/bin/neo4j console"
    sleep 10
    # initialize graph database based on pre-defined graph
    SCRIPT="{\"script\":\"g.clear();g.loadGraphML(\\\"file:$WHALE_CONF_SOURCE\\\");\",\"params\":{}}"
    curl -i -H 'Content-Type: application/json' -X POST -d "$SCRIPT" http://$HOST_IP:7474/db/data/ext/GremlinPlugin/graphdb/execute_script
    sleep 5
}

function restart_graphdb() {
    echo_summary "Starting graph db"
    # copy properties to neo4j
    cp -f $WHALE_DIR/etc/*.properties $GRAPH_DB_DIR/conf
    screen_it neo4j "cd $GRAPH_DB_DIR && $GRAPH_DB_DIR/bin/neo4j console"
    sleep 10
}

# start_whale() - Start running processes, including screen
function start_whale() {
    echo_summary "Starting whale"
    screen_it w-sync "cd $WHALE_DIR && $WHALE_DIR/bin/whale-init"
    screen_it w-api "cd $WHALE_DIR && $WHALE_DIR/bin/whale-server"
}

# stop_whale() - Stop running processes (non-screen)
function stop_whale() {
    screen -S $SCREEN_NAME -p w-sync -X kill
    screen -S $SCREEN_NAME -p w-api -X kill
    screen -S $SCREEN_NAME -p neo4j -X kill
}

# Restore xtrace
$XTRACE
