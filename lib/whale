# lib/whale
# Functions to control the configuration and operation of the whale service
# <do not include this template file in ``stack.sh``!>

# Dependencies:
# ``functions`` file
# ``SERVICE_{TENANT_NAME|PASSWORD}`` must be defined
# <list other global vars that are assumed to be defined>

# ``stack.sh`` calls the entry points in this order:
#
# install_whale
# configure_whale
# init_whale
# start_whale
# stop_whale
# cleanup_whale

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace

# Defaults
# --------

# <define global variables here that belong to this project>

# Set up default directories
WHALE_DIR=$DEST/whale
WHALECLIENT_DIR=$DEST/python-whaleclient
WHALE_CONF_DIR=${WHALE_CONF_DIR:-/etc/whale}
WHALE_CONF=$WHALE_CONF_DIR/whale.conf
WHALECLIENT_DIR=$DEST/python-whaleclient
WHALE_CONF_SOURCE=${WHALE_CONF_SOURCE:-$TOP_DIR/samples/whale/whale-vbox-graph.xml}
WHALE_CONF_NODE=$WHALE_CONF_DIR/node.xml
WHALE_CONF_CLOUD_UPDATE_TIMEOUT=${WHALE_CONF_CLOUD_UPDATE_TIMEOUT:-10}
WHALE_CONF_CLOUD_V_UPDATE_TIMEOUT=${WHALE_CONF_CLOUD_V_UPDATE_TIMEOUT:-10}
WHALE_CONF_NETWORK_UPDATE_TIMEOUT=${WHALE_CONF_NETWORK_UPDATE_TIMEOUT:-10}

GRAPH_DB_DIR=/etc/init.d
GRAPH_DB_CONF_DIR=/etc/neo4j

# Support entry points installation of console scripts
if [[ -d $WHALE_DIR/bin ]]; then
    WHALE_BIN_DIR=$WHALE_DIR/bin
else
    WHALE_BIN_DIR=/usr/local/bin
fi

# Glance connection info.  Note the port must be specified.
WHALE_HOST=${WHALE_HOST:-$SERVICE_HOST}
WHALE_PORT=${WHALE_PORT:-9976}
WHALE_SERVICE_HOST=${WHALE_SERVICE_HOST:-$PUBLIC_SERVICE_HOST}
WHALE_SERVICE_PORT=${WHALE_SERVICE_PORT:-8976}
WHALE_SERVICE_PROTOCOL=${WHALE_SERVICE_PROTOCOL:-http}

# Set Keystone interface configuration
KEYSTONE_API_PORT=${KEYSTONE_API_PORT:-5000}
KEYSTONE_AUTH_HOST=${KEYSTONE_AUTH_HOST:-$SERVICE_HOST}
KEYSTONE_AUTH_PORT=${KEYSTONE_AUTH_PORT:-35357}
KEYSTONE_AUTH_PROTOCOL=${KEYSTONE_AUTH_PROTOCOL:-http}
KEYSTONE_SERVICE_HOST=${KEYSTONE_AUTH_HOST:-$SERVICE_HOST}
KEYSTONE_SERVICE_PORT=${KEYSTONE_SERVICE_PORT:-5000}
KEYSTONE_SERVICE_PROTOCOL=${KEYSTONE_SERVICE_PROTOCOL:-http}

GRAPH_DB_HOST=${GRAPH_DB_HOST:-$WHALE_HOST}
GRAPH_DB_PORT=${GRAPH_DB_PORT:-7474}
GRAPH_DB_PROTOCOL=${GRAPH_DB_PROTOCOL:-http}
GRAPH_DB_URI=$GRAPH_DB_PROTOCOL://$GRAPH_DB_HOST:$GRAPH_DB_PORT/db/data
# Entry Points
# ------------

# cleanup_whale() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_whale() {
    # kill instances (nova)
    # delete image files (glance)
    # This function intentionally left blank
    :
}

# configure_whale() - Set config files, create data dirs, etc
function configure_whale() {
    setup_develop $WHALE_DIR

    if [[ ! -d $WHALE_CONF_DIR ]]; then
        sudo mkdir -p $WHALE_CONF_DIR
        sudo chown `whoami` $WHALE_CONF_DIR
    fi

    if [[ "$WHALE_CONF_DIR" != "$WHALE_DIR/etc" ]]; then
        cp -p $WHALE_DIR/etc/whale-api.conf $WHALE_CONF
        cp -p $WHALE_DIR/etc/policy.json $WHALE_CONF_DIR
    fi

    # Rewrite stock ``keystone.conf``
    iniset $WHALE_CONF sql connection "$BASE_SQL_CONN/nova?charset=utf8"

    iniset $WHALE_CONF filter:authtoken auth_host $GLANCE_REGISTRY_AUTH_HOST
    iniset $WHALE_CONF filter:authtoken auth_port $GLANCE_REGISTRY_AUTH_PORT
    iniset $WHALE_CONF filter:authtoken auth_protocol $KEYSTONE_AUTH_PROTOCOL
    iniset $WHALE_CONF filter:authtoken auth_uri $KEYSTONE_SERVICE_PROTOCOL://$GLANCE_REGISTRY_AUTH_HOST:$KEYSTONE_SERVICE_PORT/
    iniset $WHALE_CONF filter:authtoken auth_region $REGION_NAME
    iniset $WHALE_CONF filter:authtoken admin_tenant_name $SERVICE_TENANT_NAME
    iniset $WHALE_CONF filter:authtoken admin_user glance
    iniset $WHALE_CONF filter:authtoken admin_password $SERVICE_PASSWORD

    iniset $WHALE_CONF filter:authz auth_host $GLANCE_REGISTRY_AUTH_HOST
    iniset $WHALE_CONF filter:authz auth_port $GLANCE_REGISTRY_AUTH_PORT
    iniset $WHALE_CONF filter:authz auth_protocol $KEYSTONE_AUTH_PROTOCOL
    iniset $WHALE_CONF filter:authz auth_uri $KEYSTONE_SERVICE_PROTOCOL://$GLANCE_REGISTRY_AUTH_HOST:$KEYSTONE_SERVICE_PORT/
    iniset $WHALE_CONF filter:authz auth_region $REGION_NAME
    iniset $WHALE_CONF filter:authz admin_tenant_name $SERVICE_TENANT_NAME
    iniset $WHALE_CONF filter:authz admin_user glance
    iniset $WHALE_CONF filter:authz admin_password $SERVICE_PASSWORD

    iniset $WHALE_CONF openstack db_host $MYSQL_HOST
    iniset $WHALE_CONF openstack db_user $MYSQL_USER
    iniset $WHALE_CONF openstack db_pass $MYSQL_PASSWORD

    iniset $WHALE_CONF network of_ctrl_host $RYU_OFP_HOST
    iniset $WHALE_CONF network of_ctrl_port $RYU_OFP_PORT

    iniset $WHALE_CONF ryu wsapi_host $RYU_API_HOST
    iniset $WHALE_CONF ryu wsapi_port $RYU_API_PORT

    iniset $WHALE_CONF neo4j graphdb_uri $GRAPH_DB_URI
    iniset $WHALE_CONF neo4j initial_graph $WHALE_CONF_SOURCE

    iniset $WHALE_CONF timeout cloudupdate_timeout $WHALE_CONF_CLOUD_UPDATE_TIMEOUT
    iniset $WHALE_CONF timeout cloudupdate_timeout_v $WHALE_CONF_CLOUD_V_UPDATE_TIMEOUT
    iniset $WHALE_CONF timeout networkupdate_timeout $WHALE_CONF_NETWORK_UPDATE_TIMEOUT


}

# configure_whale() - Set config files, create data dirs, etc
function configure_whaleclient() {
    setup_develop $WHALECLIENT_DIR
}

# init_whale() - Initialize databases, etc.
function init_whale() {
    :
}

function install_graphdb() {
    neo4j_installed=$(dpkg -s neo4j|grep installed)
    if [[ "" == $neo4j_installed ]]; then
        echo "Installing Neo4j, please wait..." 
        # Import and Download neo4j signing key
        wget http://debian.neo4j.org/neotechnology.gpg.key
        sudo apt-key add neotechnology.gpg.key
        sudo bash -c 'echo "deb http://debian.neo4j.org/repo stable/" >> /etc/apt/sources.list'
        # Find out about the files in our repository
        sudo apt-get update
        # Install Neo4j, community edition
        sudo apt-get -y --force-yes install neo4j
        # stop neo4j service
        sudo $GRAPH_DB_DIR/neo4j-service stop
    else
        echo_summary "Neo4j Graph Database has been already installed\n"
    fi 
}

# install_whale() - Collect source and prepare
function install_whale() {
    git_clone $WHALE_REPO $WHALE_DIR $WHALE_BRANCH
}

# install_whale() - Collect source and prepare
function install_whaleclient() {
    git_clone $WHALECLIENT_REPO $WHALECLIENT_DIR $WHALECLIENT_BRANCH
}

# start_graphdb() - Start running processes, including screen
function start_graphdb() {
    echo_summary "Starting graph db"
    # if neo4j service is running, stop
    neo4j_status=$(sudo -u neo4j $GRAPH_DB_DIR/neo4j-service status | grep not)
    if [[ "" == $neo4j_status ]]; then
        sudo $GRAPH_DB_DIR/neo4j-service stop
    else
        echo_summary "Neo4j is not runnning"
    fi   
    sleep 5
    # copy properties to neo4j
    sudo -u neo4j cp -f $WHALE_DIR/etc/*.properties $GRAPH_DB_CONF_DIR
    screen_it neo4j "cd $GRAPH_DB_CONF_DIR && sudo -u neo4j $GRAPH_DB_DIR/neo4j-service console"
    sleep 10
    # initialize graph database based on pre-defined graph
    SCRIPT="{\"script\":\"g.clear();g.loadGraphML(\\\"file:$WHALE_CONF_SOURCE\\\");\",\"params\":{}}"
    curl -i -H 'Content-Type: application/json' -X POST -d "$SCRIPT" http://$HOST_IP:7474/db/data/ext/GremlinPlugin/graphdb/execute_script
    sleep 5
}

function restart_graphdb() {
    echo_summary "Starting graph db"
    # copy properties to neo4j
    screen_it neo4j "cd $GRAPH_DB_DIR && sudo -u neo4j $GRAPH_DB_DIR/neo4j-service console"
    sleep 10
}

# start_whale() - Start running processes, including screen
function start_whale() {
    echo_summary "Starting whale"
    screen_it w-sync "cd $WHALE_DIR && $WHALE_DIR/bin/whale-init --config-file $WHALE_CONF"
    screen_it w-api "cd $WHALE_DIR && $WHALE_DIR/bin/whale-server --config-file $WHALE_CONF"
}

# stop_whale() - Stop running processes (non-screen)
function stop_whale() {
    screen -S $SCREEN_NAME -p w-sync -X kill
    screen -S $SCREEN_NAME -p w-api -X kill
    screen -S $SCREEN_NAME -p neo4j -X kill
}

# Restore xtrace
$XTRACE
